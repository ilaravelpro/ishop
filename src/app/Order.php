<?php
/*
 * Author: Amirhossein Jahani | iAmir.net
 * Email: me@iamir.net
 * Mobile No: +98-9146941147
 * Last modified: 2021/05/20 Thu 03:24 PM IRDT
 * Copyright (c) 2020-2022. Powered by iAmir.net
 */

namespace iLaravel\iShop\iApp;

use iLaravel\iPayment\iApp\Payment;
use iLaravel\iShipping\iApp\ShippingMethod;
use Morilog\Jalali\Jalalian;

class Order extends \iLaravel\Core\iApp\Model
{
    public static $s_prefix = 'NMOR';
    public static $s_start = 24300000;
    public static $s_end = 728999999;
    public static $bname = 'order';
    public $with_resource_data = ['shipping', 'billing', 'warehouse', 'discount', 'payment_gateway', 'shipping_method'];
    public $with_resource_smart = ['items'];
    public $with_resource = ['billing', 'shipping'];

    public static $find_names = ['number'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        parent::creating(function ($event) {
            $now = now();
            $event->number = Jalalian::fromCarbon($now)->format('Ymd') . str_pad(rand(pow(10, 3), pow(10, 6)), 7, '0', STR_PAD_LEFT) . ($now->getTimestamp() - $now->setHour(0)->setMinute(0)->floorSecond(1)->setSecond(0)->getTimestamp());
        });
        parent::updating(function ($event) {
            if (static::hasTableColumn('invoice_number') && !$event->invoice_number) $event->invoice_number = static::whereNotNull('payed_at')->count();
        });
    }

    public function creator()
    {
        return $this->belongsTo(imodal('User'));
    }

    public function discount()
    {
        return $this->belongsTo(imodal('Discount'));
    }

    public function shipping()
    {
        return $this->belongsTo(imodal('Address'), 'shipping_id');
    }

    public function billing()
    {
        return $this->belongsTo(imodal('Address'), 'billing_id');
    }

    public function payment_gateway()
    {
        return $this->belongsTo(imodal('Payment'), 'payment_gateway_id');
    }

    public function shipping_method()
    {
        return $this->belongsTo(imodal('ShippingMethod'), 'shipping_method_id');
    }

    public function warehouse()
    {
        return $this->belongsTo(imodal('Warehouse'), 'warehouse_id');
    }

    public function items()
    {
        return $this->hasMany(imodal(ucfirst(static::$bname) . 'Item'), static::$bname . '_id');
    }

    public function payments()
    {
        return $this->hasMany(imodal('PaymentTransaction'), 'model_id')->where('model', ucfirst(static::$bname));
    }

    public function shipments()
    {
        return $this->hasMany(imodal('Shipment'), 'order_id');
    }

    public function cancel()
    {
        foreach ($this->items as $item)
            $item->change_stock($item->count * -1, $item->product_id, $item->price_id);
        $this->status = 'canceled';
        $this->save();
        return true;
    }

    public function add($product, $price, $count = 1)
    {
        if ($product)
            if ($price) {
                if ($price->product_id == $product->id) {
                    $item = $this->items->where('product_id', $product->id)->where('price_id', $price->id)->first() ?:
                        $this->items()->updateOrCreate(['product_id' => $product->id, 'price_id' => $price->id], ['model' => $product->model, 'model_id' => $product->model_id, 'status' => 'added']);
                    $item->count += $count ?: 1;
                    $item->count = $item->count < $product->quantity_min && $product->quantity_min ? $product->quantity_min : ($item->count >= $product->quantity_max && $product->quantity_max ? $product->quantity_max : $item->count);
                    return (object)['status' => true, 'data' => $item];
                } else return (object)['status' => false, 'data' => 'The price sent does not match the selected product.'];
            } else
                return (object)['status' => false, 'data' => 'The desired price was not found in the shopping cart.'];
        else
            return (object)['status' => false, 'data' => 'The desired product was not found in the shopping cart.'];
    }

    public function actionItem($action, $arg, $arg2 = 1, $arg3 = 0)
    {
        $modelProduct = imodal('Product');
        switch ($action) {
            case 'append':
                $result = $this->add($product = @$modelProduct::findBySerial($arg), @$product->prices->values()->get($arg3 ?: 0), $arg2 ?: 1);
                if (@$result->status) $result->data->change_stock($result->data->count, $result->data->product_id, $result->data->price_id);
                break;
            case 'decrease':
                if ($item = is_numeric($arg) ? @$this->items->get($arg ?: 0) : @$this->items->first()->findBySerial($arg)) {
                    $item->change_stock($item->count - 1, $item->product_id, $item->price_id);
                    $result = $item->decrease($arg2 ?: 1);
                } else
                    return (object)['status' => false, 'data' => 'The desired product was not found in the shopping cart.'];
                break;
            case 'increase':
                if ($item = is_numeric($arg) ? @$this->items->get($arg ?: 0) : @$this->items->first()->findBySerial($arg)) {
                    $item->change_stock($item->count + 1, $item->product_id, $item->price_id);
                    $result = $item->increase($arg2 ?: 1);
                } else
                    return (object)['status' => false, 'data' => 'The desired product was not found in the shopping cart.'];
                break;
            case 'remove':
                if ($item = is_numeric($arg) ? @$this->items->get($arg ?: 0) : @$this->items->first()->findBySerial($arg)) {
                    $item->delete();
                    $item->parent->calc();
                    $item->parent->save();
                } else
                    return (object)['status' => false, 'data' => 'The desired product was not found in the shopping cart.'];
                break;
        }
        if (@$result->status && $action !== 'remove') {
            $result->data->calc();
            $result->data->save();
            $item = $result->data;
        } elseif (@$result->status === false) return $result;
        return (object)['status' => true, 'data' => $item];
    }

    public function calc()
    {
        $this->size_x = $this->items->pluck('size_x')->sum();
        $this->size_y = $this->items->pluck('size_y')->sum();
        $this->size_z = $this->items->pluck('size_z')->sum();
        $this->weight_first = $this->items->pluck('weight')->sum();
        $this->weight_box = ceil($this->weight_first * 0.05);
        $this->weight_total = $this->weight_first + $this->weight_box;
        $this->products_total = $this->items->pluck('price_total')->sum();
        $this->discount_price = $this->items->pluck('price_discount')->sum();
        try {
            if (!$this->shipping_id)
                $this->shipping_id = $this->creator->addresses->sortByDesc('created_at')->first()->id;
            if (!$this->billing_id)
                $this->billing_id = $this->shipping_id;
        } catch (\Throwable $exception) {
        }
        try {
            if (!$this->shipping_method) {
                $shipping_method = $this->shipping ? ShippingMethod::with('cities')->where('status', 'active')->get()->sortByDesc('created_at')->filter(function ($item) {
                    return in_array($this->shipping->city_id, $item->cities->pluck('id')->toArray());
                })->first() : false;
                $shipping_method = $shipping_method ?: ShippingMethod::withCount('cities')->where('status', 'active')->having('cities_count', '>', 0)->first();
                $this->shipping_method_id = $shipping_method->id;
            }
        } catch (\Throwable $exception) {
        }

        if (!$this->payment_gateway) {
            $this->payment_gateway_id = Payment::where('status', 'active')->first()->id;
        }
        $this->shipping_total = $this->shipping_method?->service?->amount($this, $this->shipping, $this->weight_total) ?: 0;
        $this->invoice_total = $this->products_total + $this->shipping_total;
        $now = now()->format('Y-m-d H:i:S');
        if ($this->invoice_total > 0 && $this->discount &&
            ($this->discount->price_min > 0 ? $this->discount->price_min > $this->invoice_total : true) &&
            ($this->discount->quantity_min > 0 ? $this->items->sum('count') > $this->discount->quantity_min : true) &&
            ($this->discount->start_at ? $this->discount->start_at >= $now : true)
            ($this->discount->end_at ? $this->discount->end_at <= $now : true)
        )
            $this->discount_code = $this->discount->type == 'percent' ? ($this->discount->value ? (($this->invoice_total * $this->discount->value) / 100) : 0) : $this->discount->value;
        else $this->discount_code = 0;
        $this->discount_total = $this->discount_price + $this->discount_code + $this->discount_order + $this->discount_tax;
        $this->discount_total = iproduct_round_currency($this->discount_total >= $this->invoice_total ? $this->discount_total * 0.8 : $this->discount_total);
        $this->invoice_total = $this->invoice_total - $this->discount_total;
        $this->tax_total = $this->items->count() ? iproduct_round_currency($this->invoice_total * 0.09, 100, 'ceil') : 0;
        $this->payment_total = iproduct_round_currency($this->invoice_total + $this->tax_total);
        $this->save();
    }

    public function payment_callback($transaction, &$response, $provider)
    {
        if ($response['status']) {
            if (static::$bname == 'order') {
                $this->status = 'processing';
                $this->payment_status = 'payed';
                $this->shipping_status = 'processing';
                $this->save();
                $response['redirect_uri'] = static::redirect_uri($transaction, $response, $provider, $this);
            } else {
                $order = new (imodal('Order'));
                foreach ($order::getTableColumns() as $tableColumn)
                    if (!in_array($tableColumn, ['id', 'created_at', 'updated_at']))
                        $order->$tableColumn = $this->$tableColumn;
                $order->payment_status = 'payed';
                $order->shipping_status = 'processing';
                $order->status = 'processing';
                $order->save();
                $order_item_model = imodal('OrderItem');
                $order_item_columns = $order_item_model::getTableColumns();
                foreach ($this->items as $citem) {
                    $item = [];
                    foreach ($order_item_columns as $tableColumn)
                        if (!in_array($tableColumn, ['id', 'order_id', 'created_at', 'updated_at']))
                            if ($citem[$tableColumn] !== null) $item[$tableColumn] = $citem[$tableColumn];

                    $order->items()->create($item);
                }
                try {
                    if (@$order->creator->mobile->text)
                        isms_send("modals.orders.status.payed", @$order->creator->mobile->text, [
                            'number' => @$order->number,
                        ]);
                } catch (\Throwable $exception) {
                }
                $transaction->update(['model' => 'Order', 'model_id' => $order->id]);
                $response['redirect_uri'] = static::redirect_uri($transaction, $response, $provider, $order);
            }
        }else
            $response['redirect_uri'] = static::redirect_uri($transaction, $response, $provider);
        $response['redirect_method'] = 'GET';
    }

    public static function redirect_uri($transaction, $response, $provider, $order = null)
    {
        return $response['status'] ? (route('account.orders') . '/' . $order->serial) : (route('shop.checkout') . "?payment=" . $transaction->serial);
    }

    public function rules($request, $action, $arg1 = null, $arg2 = null)
    {
        $arg1 = $arg1 instanceof static ? $arg1 : (is_integer($arg1) ? static::find($arg1) : (is_string($arg1) ? static::findBySerial($arg1) : $arg1));
        $rules = [];
        $additionalRules = [];
        switch ($action) {
            case 'store':
            case 'update':
                $rules = array_merge($rules, [
                    'warehouse_id' => "required|exists:warehouses,id",
                    'shipping_id' => "required|exists:addresses,id",
                    'billing_id' => "required|exists:addresses,id",
                    'discount_id' => "nullable|exists:discounts,id",
                    'payment_gateway_id' => "nullable|exists:shop_gateways,id",
                    'shipping_method_id' => "nullable|exists:shipping_methods,id",
                    /*'number' => "required|string",
                    'weight_first' => "required|string",
                    'weight_box' => "required|string",
                    'weight_total' => "required|string",
                    'size_x' => "required|string",
                    'size_y' => "required|string",
                    'size_z' => "required|string",
                    'copies' => "required|string",
                    'products_total' => "required|string",
                    'shipping_total' => "required|string",
                    'discount_price' => "required|string",
                    'discount_code' => "required|string",
                    'discount_order' => "required|string",
                    'discount_tax' => "required|string",
                    'discount_total' => "required|string",*/
                    'payed_at' => "nullable|date_format:Y-m-d H:i:s",
                    'sent_at' => "nullable|date_format:Y-m-d H:i:s",
                    'status' => 'nullable|in:' . join(',', iconfig('status.orders', iconfig('status.global'))),
                ]);
                break;
            case 'additional':
                $rules = $additionalRules;
                break;
        }
        return $rules;
    }
}
