<?php
/*
 * Author: Amirhossein Jahani | iAmir.net
 * Email: me@iamir.net
 * Mobile No: +98-9146941147
 * Last modified: 2021/05/20 Thu 03:24 PM IRDT
 * Copyright (c) 2020-2022. Powered by iAmir.net
 */

namespace iLaravel\iShop\iApp;


use Illuminate\Validation\ValidationException;

class OrderItem extends \iLaravel\Core\iApp\Model
{
    public static $s_prefix = 'NMORIM';
    public static $s_start = 24300000000000;
    public static $s_end = 72899999999999999;

    public static $parent_name = 'order';

    public $with_resource_data = ['order', 'product', 'price'];
    public $with_resource = ['product'];
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        parent::deleted(function ($event) {
            $event->change_stock($event->count * -1, $event->product_id, $event->price_id);
        });
    }
    public function parent()
    {
        return $this->belongsTo(imodal(ucfirst(static::$parent_name)), static::$parent_name . '_id');
    }

    public function order()
    {
        return $this->belongsTo(imodal(ucfirst(static::$parent_name)));
    }

    public function price()
    {
        return $this->belongsTo(imodal('Price'), $this->price_old_id ? 'price_old_id' : 'price_id');
    }

    public function price_old()
    {
        return $this->belongsTo(imodal('PriceOld'));
    }

    public function product()
    {
        return $this->belongsTo(imodal('Product'));
    }

    public function additionalUpdate($request = null, $additional = null, $parent = null)
    {
        $this->calc();
        parent::additionalUpdate($request, $additional, $parent);
    }

    public function calc() {
        if (imodal('Warehouse')) {
            $this->size_x = $this->product->size_x;
            $this->size_y = $this->product->size_y;
            $this->size_z = $this->product->size_z;
            $this->weight = $this->product->weight;
        }

        $this->title = $this->product->title;
        $this->type = $this->product->type;
        $this->model = $this->product->model;
        $this->model_id = $this->product->model_id;
        $this->price_first = $this->price->price_first;
        $this->price_single = $this->price->price_sale;
        $this->price_discount = $this->price->discount_amount?:0;
        $this->price_tax = $this->price->tax * $this->count;
        $this->price_cost = $this->price->amount;
        $this->price_benefit = $this->price->benefit * $this->count;
        $this->price_total = $this->price->price_sale * $this->count;
        $this->save();
        if (@$this->parent) $this->parent->calc();
    }
    public function decrease($count = 1)
    {
        $this->count -= ($count?:1);
        if ($this->count < 1)
            return (object)['status' => false, 'data' => "The number cannot be reduced by more than this amount."];
        else if ($this->count < $this->product->quantity_min)
            return (object)['status' => false, 'data' => sprintf("The minimum order quantity for this product is %s.", $this->product->quantity_min)];
        else
            return (object)['status' => true, 'data' => $this];
    }
    public function increase($count = 1)
    {
        if (($this->count += ($count?:1)) < $this->product->quantity_min)
            return (object)['status' => false, 'data' => sprintf("The maximum order quantity for this product is %s.", $this->product->quantity_max)];
        else
            return (object)['status' => true, 'data' => $this];
    }

    public function change_stock($count, $product_id, $price_id) {
        $count = $count - $this->count;
        $type_name = static::$parent_name == 'order' ? 'sales' : 'presales';
        if ($this->product_id !== $product_id) {
            $price = Price::find($price_id);
            $product = Product::find($product_id);
            if ($price->product_id == $product_id) {
                $this->price->stock += $this->count;
                $this->price->$type_name -= $this->count;
                $this->price->save();
                $this->product->$type_name -= $this->count;
                $this->product->save();
                $price->stock -= $count;
                $price->$type_name += $count;
                $price->save();
                $product->$type_name += $count;
                $product->save();
            }else {
                throw ValidationException::withMessages(['count' => 'The price sent does not match the selected product.']);
            }
        }
        if ($this->price->stock - $count >= 0) {
            $this->price->stock -= $count;
            $this->price->$type_name += $count;
            $this->product->$type_name +=$count;
            $this->price->save();
            $this->product->save();
        }else {
            throw ValidationException::withMessages(['count' => 'The product is out of stock.']);
        }
    }

    public function rules($request, $action, $arg1 = null, $arg2 = null) {
        $arg1 = $arg1 instanceof static ? $arg1 : (is_integer($arg1) ? static::find($arg1) : (is_string($arg1) ? static::findBySerial($arg1) : $arg1));
        $rules = [];
        $additionalRules = [];
        switch ($action) {
            case 'store':
            case 'update':
                $rules = array_merge($rules, [
                    static::$parent_name . '_id' => "required|exists:" . static::$parent_name . "s,id",
                    'product_id' => "required|exists:products,id",
                    'price_id' => "required|numeric",
                    'count' => "required|string",
                    'status' => 'nullable|in:' . join( ',', iconfig('status.' . static::$parent_name .'_items', iconfig('status.global'))),
                ]);
                break;
            case 'additional':
                $rules = $additionalRules;
                break;
        }
        return $rules;
    }
}
