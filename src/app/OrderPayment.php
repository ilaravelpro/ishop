<?php
/*
 * Author: Amirhossein Jahani | iAmir.net
 * Email: me@iamir.net
 * Mobile No: +98-9146941147
 * Last modified: 2021/05/20 Thu 03:24 PM IRDT
 * Copyright (c) 2020-2022. Powered by iAmir.net
 */

namespace iLaravel\iShop\iApp;

use Illuminate\Support\Str;
use Morilog\Jalali\Jalalian;

class OrderPayment extends \iLaravel\Core\iApp\Model
{
    public static $s_prefix = 'NMORP';
    public static $s_start = 24300000;
    public static $s_end = 728999999;
    public static $find_names = ['slug'];

    public $files = ['image'];
    public $with_resource_data = ['gateway', 'order', 'cart'];

    protected $casts = [
        'send_request' => 'array',
        'send_response' => 'array',
        'verify_request' => 'array',
        'verify_response' => 'array',
    ];
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        parent::creating(function ($event) {
            $now = now();
            $event->number = $now->format('Ymd'). '77' . str_pad(rand(pow(10, 3), pow(10, 6)), 7, '0', STR_PAD_LEFT) . ($now->getTimestamp() - $now->setHour(0)->setMinute(0)->floorSecond(1)->setSecond(0)->getTimestamp());
            $event->hash = Str::random(77);
        });
    }

    public function creator()
    {
        return $this->belongsTo(imodal('User'));
    }
    public function gateway()
    {
        return $this->belongsTo(imodal('ShopGateway'), 'gateway_id');
    }

    public function order()
    {
        return $this->belongsTo(imodal('Order'));
    }

    public function cart()
    {
        return $this->belongsTo(imodal('Cart'));
    }

    public function rules($request, $action, $arg1 = null, $arg2 = null) {
        $arg1 = $arg1 instanceof static ? $arg1 : (is_integer($arg1) ? static::find($arg1) : (is_string($arg1) ? static::findBySerial($arg1) : $arg1));
        $rules = [];
        switch ($action) {
            case 'store':
            case 'update':
                $rules = array_merge($rules, [
                    'order_id' => "nullable|exists:orders,id",
                    'cart_id' => "required|exists:carts,id",
                    'gateway_id' => "required|exists:shop_gateways,id",
                    'provider' => "required|string",
                    'ip' => "required|string",
                    'amount' => 'required|numeric',
                    'currency' => "nullable|in:IRT",
                    'reference_id' => "nullable|string",
                    'transaction_id' => "nullable|string",
                    'payment_id' => "nullable|string",
                    'card_name' => "nullable|string",
                    'card_number' => "nullable|string",
                    'card_hash' => "nullable|string",
                    'hash' => "nullable|string",
                    'payed_at' => "nullable|date_format:Y-m-d H:i:s",
                    'checked_at' => "nullable|date_format:Y-m-d H:i:s",
                    'status' => 'nullable|in:' . join( ',', iconfig('status.order_payments', iconfig('status.global'))),
                ]);
                break;
        }
        return $rules;
    }
}
